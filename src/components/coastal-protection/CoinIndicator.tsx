import React from 'react';
import styles from './styles.module.css';

interface CoinIndicatorProps {
  count?: number;
  direction?: 'row' | 'col';
  size?: number; // px, default 15.97
  columns?: number; // for grid layout
}

const CoinSVG = ({ size = 16 }: { size?: number }) => (
  <svg width={size} height={size} viewBox="0 0 35 36" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M16.8318 1.06002C17.4311 0.981123 18.0382 0.981123 18.6375 1.06002L21.3144 1.41245C21.9138 1.49135 22.5001 1.64847 23.0586 1.8798L25.5531 2.91306C26.1116 3.14439 26.6373 3.44793 27.1169 3.81592L29.259 5.45959C29.7386 5.82758 30.1678 6.25685 30.5358 6.73642L32.1795 8.87851C32.5475 9.35808 32.851 9.88382 33.0824 10.4423L34.1156 12.9368C34.347 13.4953 34.5041 14.0817 34.583 14.681L34.9354 17.3579C35.0143 17.9572 35.0143 18.5643 34.9354 19.1636L34.583 21.8406C34.5041 22.4399 34.347 23.0263 34.1156 23.5847L33.0824 26.0793C32.851 26.6377 32.5475 27.1635 32.1795 27.643L30.5358 29.7851C30.1678 30.2647 29.7386 30.694 29.259 31.062L27.1169 32.7056C26.6373 33.0736 26.1116 33.3772 25.5531 33.6085L23.0586 34.6417C22.5001 34.8731 21.9138 35.0302 21.3144 35.1091L18.6375 35.4615C18.0382 35.5404 17.4311 35.5404 16.8318 35.4615L14.1549 35.1091C13.5555 35.0302 12.9692 34.8731 12.4107 34.6417L9.91617 33.6085C9.3577 33.3772 8.83195 33.0736 8.35238 32.7056L6.2103 31.062C5.73073 30.694 5.30146 30.2647 4.93347 29.7851L3.28979 27.643C2.9218 27.1635 2.61827 26.6377 2.38694 26.0793L1.35368 23.5847C1.12235 23.0263 0.965228 22.4399 0.886327 21.8406L0.533902 19.1636C0.455 18.5643 0.455 17.9572 0.533902 17.3579L0.886327 14.681C0.965229 14.0817 1.12235 13.4953 1.35368 12.9368L2.38694 10.4423C2.61827 9.88382 2.9218 9.35808 3.28979 8.87851L4.93347 6.73642C5.30146 6.25685 5.73073 5.82758 6.2103 5.45959L8.35238 3.81592C8.83196 3.44793 9.3577 3.14439 9.91617 2.91306L12.4107 1.8798C12.9692 1.64847 13.5555 1.49135 14.1549 1.41245L16.8318 1.06002Z" fill="#EFAD2B"/>
    <g filter="url(#filter0_d_227_4789)">
      <mask id="path-2-outside-1_227_4789" maskUnits="userSpaceOnUse" x="11.6006" y="8.64294" width="12" height="20" fill="black">
        <rect fill="white" x="11.6006" y="8.64294" width="12" height="20"/>
        <path d="M23.2423 14.6316L19.9641 15.5352L19.8591 15.6403C19.6629 14.9819 19.3407 14.4986 18.8924 14.1904C18.4441 13.8822 17.9748 13.728 17.4845 13.728C17.0082 13.728 16.6299 13.8331 16.3497 14.0433C16.0836 14.2534 15.9505 14.5056 15.9505 14.7998C15.9505 15.0099 16.0275 15.206 16.1816 15.3881C16.3357 15.5703 16.5459 15.7314 16.812 15.8715C17.1202 16.0396 17.4495 16.2007 17.7997 16.3548C18.4301 16.635 18.8434 16.8171 19.0395 16.9012C19.6279 17.1533 20.1252 17.3915 20.5315 17.6156C21.0218 17.8818 21.4701 18.197 21.8764 18.5613C22.2827 18.9255 22.6119 19.3388 22.8641 19.8011C23.1162 20.2634 23.2423 20.8027 23.2423 21.4191C23.2423 22.4979 22.9061 23.4225 22.2336 24.193C21.5612 24.9775 20.6436 25.4958 19.4808 25.748V27.5132H16.1186V25.706C15.0539 25.4538 14.1713 24.9565 13.4708 24.214C12.7844 23.4855 12.28 22.5819 11.9578 21.5032L15.257 20.6206C15.3411 20.9008 15.4671 21.181 15.6353 21.4612C15.8034 21.7273 15.9995 21.9655 16.2236 22.1756C16.4478 22.3858 16.714 22.5539 17.0222 22.68C17.3164 22.8061 17.6456 22.8691 18.0098 22.8691C18.5422 22.8691 18.9625 22.75 19.2707 22.5119C19.5649 22.2737 19.712 21.9795 19.712 21.6293C19.712 21.3631 19.6279 21.132 19.4598 20.9358C19.2777 20.7257 19.0395 20.5436 18.7453 20.3895C18.3811 20.1933 18.0168 20.0322 17.6526 19.9061C17.1483 19.724 16.7 19.5419 16.3077 19.3598C16.1536 19.2897 15.6913 19.0446 14.9208 18.6243C14.4725 18.3861 14.0662 18.0919 13.702 17.7417C13.3377 17.3915 13.0505 16.9922 12.8404 16.5439C12.6303 16.0816 12.5252 15.5352 12.5252 14.9048C12.5252 14.4565 12.6093 14.0222 12.7774 13.602C12.9455 13.1817 13.1906 12.7894 13.5129 12.4252C13.8351 12.0609 14.2203 11.7457 14.6686 11.4796C15.1309 11.1994 15.6423 10.9892 16.2026 10.8491V9.06296H19.5649V10.9332C20.4755 11.2134 21.246 11.6757 21.8764 12.3201C22.5208 12.9786 22.9761 13.7491 23.2423 14.6316Z"/>
      </mask>
      <path d="M23.2423 14.6316L19.9641 15.5352L19.8591 15.6403C19.6629 14.9819 19.3407 14.4986 18.8924 14.1904C18.4441 13.8822 17.9748 13.728 17.4845 13.728C17.0082 13.728 16.6299 13.8331 16.3497 14.0433C16.0836 14.2534 15.9505 14.5056 15.9505 14.7998C15.9505 15.0099 16.0275 15.206 16.1816 15.3881C16.3357 15.5703 16.5459 15.7314 16.812 15.8715C17.1202 16.0396 17.4495 16.2007 17.7997 16.3548C18.4301 16.635 18.8434 16.8171 19.0395 16.9012C19.6279 17.1533 20.1252 17.3915 20.5315 17.6156C21.0218 17.8818 21.4701 18.197 21.8764 18.5613C22.2827 18.9255 22.6119 19.3388 22.8641 19.8011C23.1162 20.2634 23.2423 20.8027 23.2423 21.4191C23.2423 22.4979 22.9061 23.4225 22.2336 24.193C21.5612 24.9775 20.6436 25.4958 19.4808 25.748V27.5132H16.1186V25.706C15.0539 25.4538 14.1713 24.9565 13.4708 24.214C12.7844 23.4855 12.28 22.5819 11.9578 21.5032L15.257 20.6206C15.3411 20.9008 15.4671 21.181 15.6353 21.4612C15.8034 21.7273 15.9995 21.9655 16.2236 22.1756C16.4478 22.3858 16.714 22.5539 17.0222 22.68C17.3164 22.8061 17.6456 22.8691 18.0098 22.8691C18.5422 22.8691 18.9625 22.75 19.2707 22.5119C19.5649 22.2737 19.712 21.9795 19.712 21.6293C19.712 21.3631 19.6279 21.132 19.4598 20.9358C19.2777 20.7257 19.0395 20.5436 18.7453 20.3895C18.3811 20.1933 18.0168 20.0322 17.6526 19.9061C17.1483 19.724 16.7 19.5419 16.3077 19.3598C16.1536 19.2897 15.6913 19.0446 14.9208 18.6243C14.4725 18.3861 14.0662 18.0919 13.702 17.7417C13.3377 17.3915 13.0505 16.9922 12.8404 16.5439C12.6303 16.0816 12.5252 15.5352 12.5252 14.9048C12.5252 14.4565 12.6093 14.0222 12.7774 13.602C12.9455 13.1817 13.1906 12.7894 13.5129 12.4252C13.8351 12.0609 14.2203 11.7457 14.6686 11.4796C15.1309 11.1994 15.6423 10.9892 16.2026 10.8491V9.06296H19.5649V10.9332C20.4755 11.2134 21.246 11.6757 21.8764 12.3201C22.5208 12.9786 22.9761 13.7491 23.2423 14.6316Z" fill="white"/>
    </g>
    <defs>
      <filter id="filter0_d_227_4789" x="11.5622" y="8.91992" width="12.0759" height="19.1685" filterUnits="userSpaceOnUse" colorInterpolationFilters="sRGB">
        <feFlood floodOpacity="0" result="BackgroundImageFix"/>
        <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
        <feOffset dy="0.216157"/>
        <feGaussianBlur stdDeviation="0.108079"/>
        <feComposite in2="hardAlpha" operator="out"/>
        <feColorMatrix type="matrix" values="0 0 0 0 0.757043 0 0 0 0 0.504695 0 0 0 0 0 0 0 1 0"/>
        <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_227_4789"/>
        <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_227_4789" result="shape"/>
      </filter>
    </defs>
  </svg>
);

// Animation duration in ms (should match CSS)
const ANIMATION_DURATION = 2000; // 2s for coinFloat

const CoinIndicator: React.FC<CoinIndicatorProps> = ({ count = 1, direction = 'row', size = 15.97, columns }) => {
  const coins = Array.from({ length: count });
  // Calculate a negative delay so all coins are always in sync
  const now = typeof window !== 'undefined' ? performance.now() : 0;
  const delay = -((now % ANIMATION_DURATION) / 1000); // in seconds, negative

  if (columns) {
    return (
      <div
        key={count}
        className={`grid`}
        style={{ gridTemplateColumns: `repeat(${columns}, 1fr)`, width: 'auto', marginTop: direction === 'row' ? '8px' : '0' }}
      >
        {coins.map((_, index) => (
          <span
            key={index}
            className={`${styles.coinAnimation}`}
            style={{ display: 'inline-block', width: `${size}px`, height: `${size}px`, animationDelay: `${delay}s` }}
          >
            <CoinSVG size={size} />
          </span>
        ))}
      </div>
    );
  }
  return (
    <div
      key={count}
      className={`flex ${direction === 'row' ? 'flex-row' : 'flex-col'} gap-[0.2vw] w-auto items-center flex-wrap justify-center`}
    >
      {coins.map((_, index) => (
        <span
          key={index}
          className={`${styles.coinAnimation}`}
          style={{ display: 'inline-block', width: `${size}px`, height: `${size}px`, animationDelay: `${delay}s` }}
        >
          <CoinSVG size={size} />
        </span>
      ))}
    </div>
  );
};

export default CoinIndicator;